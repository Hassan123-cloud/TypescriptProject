name: Deploy cra-template-package if version is bumped
on:
  push:
    branches: [ main, master ]
env:
  JDA_REGISTRY: "https://jdasoftware.jfrog.io/jdasoftware/api/npm/npm/"
  AZURE_APP_NAME: "my-app-mfe"

jobs:
  build-deploy:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout PR branch
        uses: actions/checkout@v2
        with:
          ref: ${{ github.head_ref }}
          fetch-depth: 2
      - uses: actions/setup-node@v2
        with:
          node-version-file: '.nvmrc'
      - name: Login to Azure
        uses: azure/login@v1
        with:
          creds: ${{ secrets.MY_CREDENTIALS }} # Replace with your credentials
      - uses: Azure/get-keyvault-secrets@v1.1
        with:
          keyvault: "my-azure-vault" # Replace with your azure vault 
          secrets: '*'
      - name: Cache node modules
        uses: actions/cache@v1
        id: cache
        with:
          path: ~/.npm # npm cache files are stored in `~/.npm` on Linux/macOS
          key: ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-build-${{ env.cache-name }}-
            ${{ runner.os }}-build-
            ${{ runner.os }}-
      - name: Set npm config
        run: |
          npm config set _auth="${{env.artifactoryAuth}}"
          npm config set always-auth
          npm config set registry "${{env.artifactoryNpmUrl}}"
          npm config set @jda:registry "${{env.artifactoryNpmUrl}}"
          npm config set email no-reply@jda.com
      - name: Install Dependencies
        if: steps.cache.outputs.cache-hit != 'true'
        run: npm install --prefer-offline --no-audit
      - name: Check version changes
        id: check
        run: |
          PACKAGE_NAME=$(jq -r ".name" ./cra-template-package/package.json)
          CURRENT_PKG_VERSION=$(jq -r ".version" ./cra-template-package/package.json)
          DEPLOYED=$([ -z "$(npm view ${PACKAGE_NAME}@${CURRENT_PKG_VERSION} 2> /dev/null)" ] && echo "false" || echo "true")
          echo CURRENT_PKG_VERSION=$CURRENT_PKG_VERSION
          echo DEPLOYED=$DEPLOYED
          echo ::set-output name=deployed::$DEPLOYED
          echo ::set-output name=version::$CURRENT_PKG_VERSION
          echo ::set-output name=packageName::${PACKAGE_NAME}
      - name: Deploy artifacts to Artifactory
        if: steps.check.outputs.deployed == 'false'
        run: |
          cd ./cra-template-package
          npm publish --tag next
      - name: Checkout Blue Yonder dependant actions
        uses: actions/checkout@v2
        with:
          ssh-key: ${{ env.MY_SSH_KEY }} # Replace for your ssh key 
          repository: JDA-Product-Development/ds-github-actions
          path: ds-actions
      - name: Blue Yonder ChatBotOps Action
        uses: ./ds-actions/by-gitops-bot
        id: chatbot
      - name: Create Github release
        if: ${{ steps.chatbot.outputs.deployAction == 'publish' }}
        uses: softprops/action-gh-release@master
        with:
          body_path: ./cra-template-package/Release.txt
          github_token: ${{ secrets.GITHUB_TOKEN }} # Replace for github token
          tag_name: ${{ steps.check.outputs.version }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }} # Replace for github token
      - name: Promote the next tagged artifact to latest
        if: ${{ steps.chatbot.outputs.deployAction == 'publish' }}
        run: |
          NEXT_PACKAGE=$(npm dist-tag ls|grep next | cut -d ":" -f 2 | awk '{print $1}')
          echo NEXT_PACKAGE=${NEXT_PACKAGE}
          npm dist-tag add ${{ steps.check.outputs.packageName }}@${NEXT_PACKAGE} latest
      - name: Check outputs
        run: |
          echo steps.chatbot.outputs.deployAction ${{ steps.chatbot.outputs.deployAction }}
      - name: Execute Test Coverage
        run: |
          npm test
      - name: Run codacy-coverage-reporter
        uses: codacy/codacy-coverage-reporter-action@master
        with:
          project-token: ${{ secrets.CODACY_PROJECT_TOKEN }}
          coverage-reports: coverage/lcov.info
  scan-dependencies:
    name: Dependencies Scan
    runs-on: ubuntu-latest
    steps:
      - name: Checkout PR branch
        uses: actions/checkout@v2
        with:
          ref: ${{ github.event.pull_request.head.sha }}
          fetch-depth: 2
      - uses: actions/setup-node@v2
        with:
          node-version-file: '.nvmrc'
      - name: Login to Azure
        uses: azure/login@v1
        with:
          creds: ${{ secrets.MY_CREDENTIALS }} # Replace with your azure credentials
      - uses: Azure/get-keyvault-secrets@v1.1
        with:
          keyvault: "my-vault" # Replace with your vault
          secrets: '*'
      - name: Cache node modules
        uses: actions/cache@v1
        id: cache
        with:
          path: ~/.npm # npm cache files are stored in `~/.npm` on Linux/macOS
          key: ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-build-${{ env.cache-name }}-
            ${{ runner.os }}-build-
            ${{ runner.os }}-
      - name: Set npm config
        run: |
          npm config set _auth="${{env.artifactoryAuth}}"
          npm config set always-auth
          npm config set registry "${{env.artifactoryNpmUrl}}"
          npm config set @jda:registry "${{env.artifactoryNpmUrl}}"
          npm config set email no-reply@jda.com
      - name: Install Dependencies
        if: steps.cache.outputs.cache-hit != 'true'
        run: npm install --prefer-offline --no-audit
      - name: Perform Blackduck scan
        uses: blackducksoftware/github-action@2.0.1
        with:
          args: '--blackduck.url="${{env.blackduckUrl}}"
          --blackduck.api.token="${{env.blackduckAuth}}"
          --detect.project.name=plat-lui-${{env.AZURE_APP_NAME}}
          --detect.project.version.name=master
          --detect.blackduck.signature.scanner.upload.source.mode=false
          --detect.blackduck.signature.scanner.exclusion.pattern.search.depth=0
          --detect.tools.excluded=SIGNATURE_SCAN
          --detect.project.tags=TAG1,TAG2
          --detect.wait.for.results=false
          --detect.risk.report.pdf=false
          --detect.npm.include.dev.dependencies=false
          --detect.report.timeout=3600
          --detect.project.user.groups=admins,users
          --detect.project.codelocation.unmap=true'
  finalize:
    name: Finalize run
    runs-on: ubuntu-latest
    needs: [build-deploy, scan-dependencies]
    steps:
      - run: echo Done running workflow

